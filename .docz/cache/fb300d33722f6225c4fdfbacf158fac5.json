{"remainingRequest":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/preset-env\",\"@babel/preset-react\",[\"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/abstract/simple-ui-component.js","dependencies":[{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/abstract/simple-ui-component.js","mtime":1559769917693},{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/cache-loader/dist/cjs.js","mtime":1551899788855},{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1559770457280}],"contextDependencies":[],"result":["function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_nonIterableSpread();}function _nonIterableSpread(){throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter){if(Symbol.iterator in Object(iter)||Object.prototype.toString.call(iter)===\"[object Arguments]\")return Array.from(iter);}function _arrayWithoutHoles(arr){if(Array.isArray(arr)){for(var i=0,arr2=new Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}}import React from'react';import PropTypes from'prop-types';import{getAdditionalClassNames}from'../helpers/universal-props';var SimpleUiComponentPropTypes={children:PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node),PropTypes.node]).isRequired,className:PropTypes.string};/**\n * Simple component that passes props and attaches the className\n * @param {React.Component} el \n * @param {String} className \n * @param {Object} props \n */function SimpleUiComponent(el,className,props){var classNames=[className].concat(_toConsumableArray(getAdditionalClassNames(props)));if(typeof props.className==='string'){classNames.push(props.className);}return React.cloneElement(el,Object.assign({},props,{className:classNames.join(' ')}));}export default SimpleUiComponent;export{SimpleUiComponentPropTypes};SimpleUiComponent.__docgenInfo={\"description\":\"Simple component that passes props and attaches the className\\n@param {React.Component} el \\n@param {String} className \\n@param {Object} props\",\"methods\":[],\"displayName\":\"SimpleUiComponent\"};",{"version":3,"sources":["/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/abstract/simple-ui-component.js"],"names":["React","PropTypes","getAdditionalClassNames","SimpleUiComponentPropTypes","children","oneOfType","arrayOf","node","isRequired","className","string","SimpleUiComponent","el","props","classNames","push","cloneElement","Object","assign","join"],"mappings":"4fAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,CACA,OAASC,uBAAT,KAAwC,4BAAxC,CAEA,GAAMC,CAAAA,0BAA0B,CAAG,CAC/BC,QAAQ,CAAEH,SAAS,CAACI,SAAV,CAAoB,CAC1BJ,SAAS,CAACK,OAAV,CAAkBL,SAAS,CAACM,IAA5B,CAD0B,CAE1BN,SAAS,CAACM,IAFgB,CAApB,EAGPC,UAJ4B,CAK/BC,SAAS,CAAER,SAAS,CAACS,MALU,CAAnC,CAQA;;;;;GAMA,QAASC,CAAAA,iBAAT,CAA2BC,EAA3B,CAA+BH,SAA/B,CAA0CI,KAA1C,CAAiD,CAC7C,GAAMC,CAAAA,UAAU,EAAKL,SAAL,4BAAmBP,uBAAuB,CAACW,KAAD,CAA1C,EAAhB,CAEA,GAAI,MAAOA,CAAAA,KAAK,CAACJ,SAAb,GAA2B,QAA/B,CAAyC,CACrCK,UAAU,CAACC,IAAX,CAAgBF,KAAK,CAACJ,SAAtB,EACH,CAED,MAAOT,CAAAA,KAAK,CAACgB,YAAN,CACHJ,EADG,CAEHK,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBL,KAAlB,CAAyB,CAAEJ,SAAS,CAAEK,UAAU,CAACK,IAAX,CAAgB,GAAhB,CAAb,CAAzB,CAFG,CAAP,CAIH,CAED,cAAeR,CAAAA,iBAAf,CACA,OACIR,0BADJ,E","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getAdditionalClassNames } from '../helpers/universal-props';\n\nconst SimpleUiComponentPropTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ]).isRequired,\n    className: PropTypes.string\n};\n\n/**\n * Simple component that passes props and attaches the className\n * @param {React.Component} el \n * @param {String} className \n * @param {Object} props \n */\nfunction SimpleUiComponent(el, className, props) {\n    const classNames = [ className, ...getAdditionalClassNames(props) ];\n\n    if (typeof props.className === 'string') {\n        classNames.push(props.className);\n    }\n\n    return React.cloneElement(\n        el,\n        Object.assign({}, props, { className: classNames.join(' ') })\n    );\n}\n\nexport default SimpleUiComponent;\nexport {\n    SimpleUiComponentPropTypes\n};\n"]}]}