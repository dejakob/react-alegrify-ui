{"remainingRequest":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/preset-env\",\"@babel/preset-react\",[\"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/dropdown.js","dependencies":[{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/dropdown.js","mtime":1559767734110},{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/cache-loader/dist/cjs.js","mtime":1551899788855},{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1551376331885}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/dropdown.js\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React, { Component } from 'react';\nimport ReactDom from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { attachUniversalProps } from './helpers/universal-props';\nvar KEY_CODES = {\n  UP: 38,\n  DOWN: 40,\n  ENTER: 13,\n  ESCAPE: 27,\n  TAB: 9\n};\n/**\n * ```jsx\n * <Dropdown>\n *      <DropdownItem\n *          value=\"cookies\"\n *      >\n *          Cookies\n *      </DropdownItem>\n *      <DropdownItem\n *          value=\"apples\"\n *      >\n *          Apples\n *      </DropdownItem>\n * </Dropdown>\n * ```\n */\n\nvar Dropdown =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dropdown, _Component);\n\n  function Dropdown() {\n    var _this;\n\n    _classCallCheck(this, Dropdown);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dropdown).call(this));\n    _this.changeSelectedIndex = _this.changeSelectedIndex.bind(_assertThisInitialized(_this));\n    _this.handleBodyClick = _this.handleBodyClick.bind(_assertThisInitialized(_this));\n    _this.actions = {\n      handleSelectOption: _this.handleSelectOption.bind(_assertThisInitialized(_this)),\n      handleOpenDropdown: _this.handleOpenDropdown.bind(_assertThisInitialized(_this)),\n      handleKeyDown: _this.handleKeyDown.bind(_assertThisInitialized(_this))\n    };\n    return _this;\n  }\n\n  _createClass(Dropdown, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var childrenAsArray = typeof this.props.children.map === 'function' ? this.props.children : React.Children.toArray(this.props.children);\n      var value = childrenAsArray.find(function (child) {\n        return _this2.props.value === child.props.value;\n      });\n      this.setState({\n        value: value || null,\n        open: false\n      });\n\n      if (typeof window !== 'undefined') {\n        document.body.addEventListener('click', this.handleBodyClick);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (typeof window !== 'undefined') {\n        document.body.removeEventListener('click', this.handleBodyClick);\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      if (newProps.value !== this.state.value && newProps.value !== this.props.value) {\n        var childrenAsArray = typeof newProps.children.map === 'function' ? newProps.children : React.Children.toArray(newProps.children);\n        var value = childrenAsArray.find(function (child) {\n          return newProps.value === child.props.value;\n        });\n        this.setState({\n          value: value || null\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(newProps, newState) {\n      if ((newState.value && newState.value.props.value) !== (this.state.value && this.state.value.props.value)) {\n        if (typeof this.props.onValueChange === 'function' && newState.value) {\n          this.props.onValueChange(newState.value.props.value);\n        }\n      }\n    }\n  }, {\n    key: \"handleSelectOption\",\n    value: function handleSelectOption(index) {\n      var childrenAsArray = typeof this.props.children.map === 'function' ? this.props.children : React.Children.toArray(this.props.children);\n      this.setState({\n        value: childrenAsArray[index],\n        open: false\n      });\n    }\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(eventData) {\n      var keyCode = eventData.keyCode;\n\n      switch (keyCode) {\n        case KEY_CODES.UP:\n          eventData.preventDefault();\n          this.changeSelectedIndex(-1);\n          break;\n\n        case KEY_CODES.DOWN:\n          eventData.preventDefault();\n          this.changeSelectedIndex(1);\n          break;\n\n        case KEY_CODES.ENTER:\n          eventData.preventDefault();\n          this.setState({\n            open: !this.state.open\n          });\n          break;\n\n        case KEY_CODES.ESCAPE:\n          eventData.preventDefault();\n          this.setState({\n            open: false\n          });\n          break;\n\n        default:\n          var char = eventData.which || eventData.charCode;\n\n          if (char >= 32) {\n            var query = String.fromCharCode(char);\n            var childrenAsArray = typeof this.props.children.map === 'function' ? this.props.children : React.Children.toArray(this.props.children);\n            var index = Math.max(childrenAsArray.findIndex(function (child) {\n              return child.props.value.toLowerCase().indexOf(query.toLowerCase()) > -1;\n            }), 0);\n            this.setState({\n              value: childrenAsArray[index]\n            });\n          }\n\n      }\n    }\n  }, {\n    key: \"handleOpenDropdown\",\n    value: function handleOpenDropdown(eventData) {\n      this.setState({\n        open: eventData.target.checked\n      });\n    }\n  }, {\n    key: \"changeSelectedIndex\",\n    value: function changeSelectedIndex(increment) {\n      var _this3 = this;\n\n      var childrenAsArray = typeof this.props.children.map === 'function' ? this.props.children : React.Children.toArray(this.props.children);\n      var currentIndex = Math.max(childrenAsArray.findIndex(function (child) {\n        return _this3.state.value && _this3.state.value.props.value === child.props.value;\n      }), 0);\n      var newIndex = (currentIndex + childrenAsArray.length + increment) % childrenAsArray.length;\n      this.setState({\n        value: childrenAsArray[newIndex]\n      });\n    }\n  }, {\n    key: \"handleBodyClick\",\n    value: function handleBodyClick(eventData) {\n      var target = eventData.target;\n      var node = target;\n\n      while (node !== document.body && node !== ReactDom.findDOMNode(this)) {\n        node = node.parentNode;\n      }\n\n      if (node === document.body) {\n        this.setState({\n          open: false\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return DropdownView(Object.assign({}, this.props, this.state, this.actions));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return Dropdown;\n}(Component);\n/**\n * View for Dropdown\n */\n\n\nfunction DropdownView(props) {\n  var classNames = ['alegrify-dropdown__container'];\n  var value = props.value;\n\n  if (typeof props.className === 'string' && props.className.trim() !== '') {\n    classNames.push(props.className);\n  }\n\n  if (props.disabled) {\n    classNames.push('alegrify-dropdown--disabled');\n  }\n\n  return React.createElement(\"div\", {\n    className: classNames.join(' '),\n    onKeyDown: props.handleKeyDown,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"alegrify-dropdown__trigger\",\n    type: \"checkbox\",\n    id: props.id,\n    onChange: props.handleOpenDropdown,\n    checked: props.open,\n    disabled: props.disabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"alegrify-dropdown__label\",\n    htmlFor: props.id,\n    \"aria-controls\": \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, value ? value.props.children : props.placeholder || '...'), React.createElement(\"fieldset\", {\n    className: \"alegrify-dropdown\",\n    role: \"menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, renderChildren()));\n  /**\n   * Render dropdown items\n   * (Can either be an array of children or React.children)\n   */\n\n  function renderChildren() {\n    if (!props.open) {\n      return null;\n    }\n\n    if (typeof props.children.map === 'function') {\n      return props.children.map(renderChild);\n    } else {\n      return React.Children.map(props.children, renderChild);\n    }\n  }\n  /**\n   * Render single child\n   * @param {Node} child \n   * @param {String} index \n   */\n\n\n  function renderChild(child) {\n    var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return React.cloneElement(child, {\n      onSelect: function onSelect() {\n        return props.handleSelectOption(index);\n      },\n      multiSelect: props.multiSelect,\n      checked: props.value && props.value.props.value === child.props.value,\n      name: props.name,\n      key: index\n    });\n  }\n} // Todo: disabled\n\n\nDropdown.propTypes = {\n  /**\n   * Id of the dropdown\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Name of the dropdown\n   */\n  name: PropTypes.string.isRequired,\n\n  /**\n   * Items for the dropdown\n   */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n\n  /**\n   * Additional classnames\n   */\n  className: PropTypes.string,\n\n  /**\n   * Selected value of the dropdown\n   */\n  value: PropTypes.string,\n\n  /**\n   * Placeholder message for dropdown label\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * Should the dropdown be disabled?\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Gets triggered when value changes\n   * Passes value string as argument\n   */\n  onValueChange: PropTypes.func\n};\nDropdown.defaultProps = {\n  value: null,\n  placeholder: '...',\n  disabled: false,\n  multiSelect: false\n};\nDropdown.propExamples = Dropdown.defaultProps;\n\nvar _default = attachUniversalProps(Dropdown);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(KEY_CODES, \"KEY_CODES\", \"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/dropdown.js\");\n  reactHotLoader.register(Dropdown, \"Dropdown\", \"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/dropdown.js\");\n  reactHotLoader.register(DropdownView, \"DropdownView\", \"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/dropdown.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/dropdown.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();\n\nDropdown.__docgenInfo = {\n  \"description\": \"```jsx\\n<Dropdown>\\n     <DropdownItem\\n         value=\\\"cookies\\\"\\n     >\\n         Cookies\\n     </DropdownItem>\\n     <DropdownItem\\n         value=\\\"apples\\\"\\n     >\\n         Apples\\n     </DropdownItem>\\n</Dropdown>\\n```\",\n  \"methods\": [{\n    \"name\": \"handleSelectOption\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"index\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"handleKeyDown\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"eventData\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"handleOpenDropdown\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"eventData\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"changeSelectedIndex\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"increment\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"handleBodyClick\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"eventData\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }],\n  \"displayName\": \"Dropdown\",\n  \"props\": {\n    \"value\": {\n      \"defaultValue\": {\n        \"value\": \"null\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Selected value of the dropdown\"\n    },\n    \"placeholder\": {\n      \"defaultValue\": {\n        \"value\": \"'...'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder message for dropdown label\"\n    },\n    \"disabled\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Should the dropdown be disabled?\"\n    },\n    \"multiSelect\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"required\": false\n    },\n    \"id\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Id of the dropdown\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Name of the dropdown\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"arrayOf\",\n          \"value\": {\n            \"name\": \"node\"\n          }\n        }, {\n          \"name\": \"node\"\n        }]\n      },\n      \"required\": true,\n      \"description\": \"Items for the dropdown\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Additional classnames\"\n    },\n    \"onValueChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Gets triggered when value changes\\nPasses value string as argument\"\n    }\n  }\n};",{"version":3,"sources":["/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/dropdown.js"],"names":["React","Component","ReactDom","PropTypes","attachUniversalProps","KEY_CODES","UP","DOWN","ENTER","ESCAPE","TAB","Dropdown","changeSelectedIndex","bind","handleBodyClick","actions","handleSelectOption","handleOpenDropdown","handleKeyDown","childrenAsArray","props","children","map","Children","toArray","value","find","child","setState","open","window","document","body","addEventListener","removeEventListener","newProps","state","newState","onValueChange","index","eventData","keyCode","preventDefault","char","which","charCode","query","String","fromCharCode","Math","max","findIndex","toLowerCase","indexOf","target","checked","increment","currentIndex","newIndex","length","node","findDOMNode","parentNode","DropdownView","Object","assign","classNames","className","trim","push","disabled","join","id","placeholder","renderChildren","renderChild","cloneElement","onSelect","multiSelect","name","key","propTypes","string","isRequired","oneOfType","arrayOf","bool","func","defaultProps","propExamples"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDom from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { attachUniversalProps } from './helpers/universal-props';\n\nconst KEY_CODES = {\n    UP: 38,\n    DOWN: 40,\n    ENTER: 13,\n    ESCAPE: 27,\n    TAB: 9\n};\n\n/**\n * ```jsx\n * <Dropdown>\n *      <DropdownItem\n *          value=\"cookies\"\n *      >\n *          Cookies\n *      </DropdownItem>\n *      <DropdownItem\n *          value=\"apples\"\n *      >\n *          Apples\n *      </DropdownItem>\n * </Dropdown>\n * ```\n */\nclass Dropdown extends Component {\n    constructor() {\n        super();\n\n        this.changeSelectedIndex = this.changeSelectedIndex.bind(this);\n        this.handleBodyClick = this.handleBodyClick.bind(this);\n\n        this.actions = {\n            handleSelectOption: this.handleSelectOption.bind(this),\n            handleOpenDropdown: this.handleOpenDropdown.bind(this),\n            handleKeyDown: this.handleKeyDown.bind(this)\n        };\n    }\n\n    componentWillMount() {\n        const childrenAsArray = typeof this.props.children.map === 'function' ?\n            this.props.children :\n            React.Children.toArray(this.props.children);\n\n        const value = childrenAsArray.find(child => \n            this.props.value === child.props.value\n        );\n\n        this.setState({\n            value: value || null,\n            open: false\n        });\n\n        if (typeof window !== 'undefined') {\n            document.body.addEventListener('click', this.handleBodyClick);\n        }\n    }\n\n    componentWillUnmount() {\n        if (typeof window !== 'undefined') {\n            document.body.removeEventListener('click', this.handleBodyClick);\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (\n            newProps.value !== this.state.value &&\n            newProps.value !== this.props.value\n        ) {\n            const childrenAsArray = typeof newProps.children.map === 'function' ?\n                newProps.children :\n                React.Children.toArray(newProps.children);\n\n            const value = childrenAsArray.find(child => \n                newProps.value === child.props.value\n            );\n\n            this.setState({\n                value: value || null\n            });\n        }\n    }\n\n    componentWillUpdate(newProps, newState) {\n        if (\n            (newState.value && newState.value.props.value) !== (this.state.value && this.state.value.props.value)\n        ) {\n            if (typeof this.props.onValueChange === 'function' && newState.value) {\n                this.props.onValueChange(newState.value.props.value);\n            }\n        }\n    }\n\n    handleSelectOption(index) {\n        const childrenAsArray = typeof this.props.children.map === 'function' ?\n            this.props.children :\n            React.Children.toArray(this.props.children);\n\n        this.setState({\n            value: childrenAsArray[index],\n            open: false\n        });\n    }\n\n    handleKeyDown(eventData) {\n        const { keyCode } = eventData;\n\n        switch (keyCode) {\n            case KEY_CODES.UP:\n                eventData.preventDefault();\n                this.changeSelectedIndex(-1);\n            break;\n\n            case KEY_CODES.DOWN:\n                eventData.preventDefault();\n                this.changeSelectedIndex(1);\n            break;\n\n            case KEY_CODES.ENTER:\n                eventData.preventDefault();\n                this.setState({ open: !this.state.open });\n            break;\n\n            case KEY_CODES.ESCAPE:\n                eventData.preventDefault();\n                this.setState({ open: false });\n            break;\n\n            default:\n                const char = eventData.which || eventData.charCode;\n\n                if (char >= 32) {\n                    const query = String.fromCharCode(char);\n                    const childrenAsArray = typeof this.props.children.map === 'function' ?\n                        this.props.children :\n                        React.Children.toArray(this.props.children);\n                    const index = Math.max(childrenAsArray.findIndex(child =>\n                        child.props.value.toLowerCase().indexOf(query.toLowerCase()) > -1\n                    ), 0);\n    \n                    this.setState({\n                        value: childrenAsArray[index]\n                    });\n                }\n        }\n    }\n\n    handleOpenDropdown(eventData) {\n        this.setState({ open: eventData.target.checked });\n    }\n\n    changeSelectedIndex(increment) {\n        const childrenAsArray = typeof this.props.children.map === 'function' ?\n            this.props.children :\n            React.Children.toArray(this.props.children);\n        const currentIndex = Math.max(childrenAsArray.findIndex(child =>\n            this.state.value && this.state.value.props.value === child.props.value\n        ), 0);\n        const newIndex = (currentIndex + childrenAsArray.length + increment) % childrenAsArray.length;\n\n        this.setState({\n            value: childrenAsArray[newIndex]\n        });\n    }\n\n    handleBodyClick(eventData) {\n        const { target } = eventData;\n        let node = target;\n\n        while (node !== document.body && node !== ReactDom.findDOMNode(this)) {\n            node = node.parentNode;\n        }\n\n        if (node === document.body) {\n            this.setState({ open: false });\n        }\n    }\n\n    render() {\n        return DropdownView(\n            Object.assign(\n                {},\n                this.props,\n                this.state,\n                this.actions\n            )\n        );\n    }\n}\n\n/**\n * View for Dropdown\n */\nfunction DropdownView(props) {\n    const classNames = ['alegrify-dropdown__container'];\n    const { value } = props;\n\n    if (typeof props.className === 'string' && props.className.trim() !== '') {\n        classNames.push(props.className);\n    }\n\n    if (props.disabled) {\n        classNames.push('alegrify-dropdown--disabled');\n    }\n\n    return (\n        <div\n            className={classNames.join(' ')}\n            onKeyDown={props.handleKeyDown}\n        >\n            <input\n                className=\"alegrify-dropdown__trigger\"\n                type=\"checkbox\"\n                id={props.id}\n                onChange={props.handleOpenDropdown}\n                checked={props.open}\n                disabled={props.disabled}\n            />\n            <label\n                className=\"alegrify-dropdown__label\"\n                htmlFor={props.id}\n                aria-controls=\"\"\n            >\n                {value ? value.props.children : props.placeholder || '...'}\n            </label>\n            <fieldset\n                className=\"alegrify-dropdown\"\n                role=\"menu\"\n            >\n                {renderChildren()}\n            </fieldset>\n        </div>\n    );\n\n    /**\n     * Render dropdown items\n     * (Can either be an array of children or React.children)\n     */\n    function renderChildren() {\n        if (!props.open) {\n            return null;\n        }\n\n        if (typeof props.children.map === 'function') {\n            return props.children.map(renderChild);\n        }\n        else {\n            return React.Children.map(props.children, renderChild);\n        }\n    }\n\n    /**\n     * Render single child\n     * @param {Node} child \n     * @param {String} index \n     */\n    function renderChild(child, index = 0) {\n        return React.cloneElement(child, {\n            onSelect: () => props.handleSelectOption(index),\n            multiSelect: props.multiSelect,\n            checked: props.value && props.value.props.value === child.props.value,\n            name: props.name,\n            key: index\n        });\n    }\n}\n\n// Todo: disabled\n\nDropdown.propTypes = {\n\n    /**\n     * Id of the dropdown\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * Name of the dropdown\n     */\n    name: PropTypes.string.isRequired,\n\n    /**\n     * Items for the dropdown\n     */\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ]).isRequired,\n\n    /**\n     * Additional classnames\n     */\n    className: PropTypes.string,\n\n    /**\n     * Selected value of the dropdown\n     */\n    value: PropTypes.string,\n\n    /**\n     * Placeholder message for dropdown label\n     */\n    placeholder: PropTypes.string,\n\n    /**\n     * Should the dropdown be disabled?\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Gets triggered when value changes\n     * Passes value string as argument\n     */\n    onValueChange: PropTypes.func\n};\nDropdown.defaultProps = {\n    value: null,\n    placeholder: '...',\n    disabled: false,\n    multiSelect: false\n};\nDropdown.propExamples = Dropdown.defaultProps;\n\nexport default attachUniversalProps(Dropdown);\n"]}]}