{"remainingRequest":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/source-map-loader/index.js!/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/abstract/input-with-state.js","dependencies":[{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/abstract/input-with-state.js","mtime":1552132314881},{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/cache-loader/dist/cjs.js","mtime":1559771649804},{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/thread-loader/dist/cjs.js","mtime":1559771650461},{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1559770457280},{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/source-map-loader/index.js","mtime":1551899789434}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20gIi9Vc2Vycy9qYWtvYmtlcmtob3ZlL2FsZWdyaWZ5L3JlYWN0LWFsZWdyaWZ5LXVpL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL2pha29ia2Vya2hvdmUvYWxlZ3JpZnkvcmVhY3QtYWxlZ3JpZnktdWkvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZCI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL1VzZXJzL2pha29ia2Vya2hvdmUvYWxlZ3JpZnkvcmVhY3QtYWxlZ3JpZnktdWkvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvVXNlcnMvamFrb2JrZXJraG92ZS9hbGVncmlmeS9yZWFjdC1hbGVncmlmeS11aS9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwppbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAiL1VzZXJzL2pha29ia2Vya2hvdmUvYWxlZ3JpZnkvcmVhY3QtYWxlZ3JpZnktdWkvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOwppbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gIi9Vc2Vycy9qYWtvYmtlcmtob3ZlL2FsZWdyaWZ5L3JlYWN0LWFsZWdyaWZ5LXVpL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZiI7CmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gIi9Vc2Vycy9qYWtvYmtlcmtob3ZlL2FsZWdyaWZ5L3JlYWN0LWFsZWdyaWZ5LXVpL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiOwppbXBvcnQgX2luaGVyaXRzIGZyb20gIi9Vc2Vycy9qYWtvYmtlcmtob3ZlL2FsZWdyaWZ5L3JlYWN0LWFsZWdyaWZ5LXVpL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyI7CnZhciBfanN4RmlsZU5hbWUgPSAiL1VzZXJzL2pha29ia2Vya2hvdmUvYWxlZ3JpZnkvcmVhY3QtYWxlZ3JpZnktdWkvbGliL2Fic3RyYWN0L2lucHV0LXdpdGgtc3RhdGUuanMiOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgZW50ZXJNb2R1bGUgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5lbnRlck1vZHVsZTsKICBlbnRlck1vZHVsZSAmJiBlbnRlck1vZHVsZShtb2R1bGUpOwp9KSgpOwoKaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JzsKdmFyIElOUFVUX01FVEhPRFMgPSBbJ2NoYW5nZVZhbHVlJywgJ29uSW5wdXQnXTsKLyoqCiAqIEBhYnN0cmFjdAogKi8KCnZhciBJbnB1dFdpdGhTdGF0ZSA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9Db21wb25lbnQpIHsKICBfaW5oZXJpdHMoSW5wdXRXaXRoU3RhdGUsIF9Db21wb25lbnQpOwoKICBmdW5jdGlvbiBJbnB1dFdpdGhTdGF0ZSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5wdXRXaXRoU3RhdGUpOwoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKElucHV0V2l0aFN0YXRlKS5jYWxsKHRoaXMpKTsKICAgIF90aGlzLm1ldGhvZHMgPSB7fTsKICAgIElOUFVUX01FVEhPRFMuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kTmFtZSkgewogICAgICBfdGhpcy5tZXRob2RzW21ldGhvZE5hbWVdID0gX3RoaXNbbWV0aG9kTmFtZV0uYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7CiAgICB9KTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhJbnB1dFdpdGhTdGF0ZSwgW3sKICAgIGtleTogImNvbXBvbmVudFdpbGxNb3VudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkgewogICAgICB0aGlzLnNldFN0YXRlKHsKICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSB8fCAnJwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzKSB7CiAgICAgIGlmIChuZXdQcm9wcy52YWx1ZSAhPT0gdGhpcy5wcm9wcy52YWx1ZSkgewogICAgICAgIHRoaXMuc2V0U3RhdGUoewogICAgICAgICAgdmFsdWU6IG5ld1Byb3BzLnZhbHVlCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJjaGFuZ2VWYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlVmFsdWUodmFsdWUpIHsKICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLnN0YXRlLnZhbHVlKSB7CiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICB9KTsKCiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLm9uVmFsdWVDaGFuZ2UgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgIHRoaXMucHJvcHMub25WYWx1ZUNoYW5nZSh2YWx1ZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAib25JbnB1dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25JbnB1dChldmVudERhdGEpIHsKICAgICAgdmFyIHZhbHVlID0gZXZlbnREYXRhLnRhcmdldC52YWx1ZTsKCiAgICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5zdGF0ZS52YWx1ZSkgewogICAgICAgIHRoaXMuc2V0U3RhdGUoewogICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgfSk7CgogICAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5vblZhbHVlQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICB0aGlzLnByb3BzLm9uVmFsdWVDaGFuZ2UodmFsdWUpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICByZXR1cm4gdGhpcy5wcm9wcy5yZW5kZXJNZXRob2QodGhpcy5hbGxQcm9wcyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX19yZWFjdHN0YW5kaW5fX3JlZ2VuZXJhdGVCeUV2YWwiLAogICAgLy8gQHRzLWlnbm9yZQogICAgdmFsdWU6IGZ1bmN0aW9uIF9fcmVhY3RzdGFuZGluX19yZWdlbmVyYXRlQnlFdmFsKGtleSwgY29kZSkgewogICAgICAvLyBAdHMtaWdub3JlCiAgICAgIHRoaXNba2V5XSA9IGV2YWwoY29kZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWxsUHJvcHMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLnByb3BzLCB0aGlzLnN0YXRlLCB0aGlzLm1ldGhvZHMpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIElucHV0V2l0aFN0YXRlOwp9KENvbXBvbmVudCk7Cgp2YXIgd3JhcFdpdGhJbnB1dFN0YXRlID0gZnVuY3Rpb24gd3JhcFdpdGhJbnB1dFN0YXRlKHJlbmRlck1ldGhvZCkgewogIHJldHVybiBmdW5jdGlvbiAocHJvcHMpIHsKICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0V2l0aFN0YXRlLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsKICAgICAgcmVuZGVyTWV0aG9kOiByZW5kZXJNZXRob2QsCiAgICAgIF9fc291cmNlOiB7CiAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgICBsaW5lTnVtYmVyOiA3MgogICAgICB9LAogICAgICBfX3NlbGY6IHRoaXMKICAgIH0pKTsKICB9Owp9OwoKZXhwb3J0IHsgd3JhcFdpdGhJbnB1dFN0YXRlIH07CgppZiAodHlwZW9mIHdyYXBXaXRoSW5wdXRTdGF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgd3JhcFdpdGhJbnB1dFN0YXRlICYmIHdyYXBXaXRoSW5wdXRTdGF0ZSA9PT0gT2JqZWN0KHdyYXBXaXRoSW5wdXRTdGF0ZSkgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZSh3cmFwV2l0aElucHV0U3RhdGUpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdyYXBXaXRoSW5wdXRTdGF0ZSwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIndyYXBXaXRoSW5wdXRTdGF0ZSIsCiAgICAgIGZpbGVuYW1lOiAibGliL2Fic3RyYWN0L2lucHV0LXdpdGgtc3RhdGUuanMiCiAgICB9CiAgfSk7Cn0KCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIHJlYWN0SG90TG9hZGVyID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkuZGVmYXVsdDsKCiAgaWYgKCFyZWFjdEhvdExvYWRlcikgewogICAgcmV0dXJuOwogIH0KCiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoSU5QVVRfTUVUSE9EUywgIklOUFVUX01FVEhPRFMiLCAiL1VzZXJzL2pha29ia2Vya2hvdmUvYWxlZ3JpZnkvcmVhY3QtYWxlZ3JpZnktdWkvbGliL2Fic3RyYWN0L2lucHV0LXdpdGgtc3RhdGUuanMiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihJbnB1dFdpdGhTdGF0ZSwgIklucHV0V2l0aFN0YXRlIiwgIi9Vc2Vycy9qYWtvYmtlcmtob3ZlL2FsZWdyaWZ5L3JlYWN0LWFsZWdyaWZ5LXVpL2xpYi9hYnN0cmFjdC9pbnB1dC13aXRoLXN0YXRlLmpzIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIod3JhcFdpdGhJbnB1dFN0YXRlLCAid3JhcFdpdGhJbnB1dFN0YXRlIiwgIi9Vc2Vycy9qYWtvYmtlcmtob3ZlL2FsZWdyaWZ5L3JlYWN0LWFsZWdyaWZ5LXVpL2xpYi9hYnN0cmFjdC9pbnB1dC13aXRoLXN0YXRlLmpzIik7Cn0pKCk7Cgo7CgooZnVuY3Rpb24gKCkgewogIHZhciBsZWF2ZU1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmxlYXZlTW9kdWxlOwogIGxlYXZlTW9kdWxlICYmIGxlYXZlTW9kdWxlKG1vZHVsZSk7Cn0pKCk7"},{"version":3,"sources":["/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/abstract/input-with-state.js"],"names":["React","Component","INPUT_METHODS","InputWithState","methods","forEach","methodName","bind","setState","value","props","newProps","state","onValueChange","eventData","target","renderMethod","allProps","wrapWithInputState"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,IAAMC,aAAa,GAAG,CAClB,aADkB,EAElB,SAFkB,CAAtB;AAKA;;;;IAGMC,c;;;;;AACF,4BAAc;AAAA;;AAAA;;AACV;AAEA,UAAKC,OAAL,GAAe,EAAf;AACAF,IAAAA,aAAa,CACRG,OADL,CACa,UAAAC,UAAU,EAAI;AACnB,YAAKF,OAAL,CAAaE,UAAb,IAA2B,MAAKA,UAAL,EAAiBC,IAAjB,+BAA3B;AACH,KAHL;AAJU;AAQb;;;;yCAEoB;AACjB,WAAKC,QAAL,CAAc;AACVC,QAAAA,KAAK,EAAE,KAAKC,KAAL,CAAWD,KAAX,IAAoB;AADjB,OAAd;AAGH;;;8CAEyBE,Q,EAAU;AAChC,UAAIA,QAAQ,CAACF,KAAT,KAAmB,KAAKC,KAAL,CAAWD,KAAlC,EAAyC;AACrC,aAAKD,QAAL,CAAc;AAAEC,UAAAA,KAAK,EAAEE,QAAQ,CAACF;AAAlB,SAAd;AACH;AACJ;;;gCAUWA,K,EAAO;AACf,UAAIA,KAAK,KAAK,KAAKG,KAAL,CAAWH,KAAzB,EAAgC;AAC5B,aAAKD,QAAL,CAAc;AAAEC,UAAAA,KAAK,EAALA;AAAF,SAAd;;AAEA,YAAI,OAAO,KAAKC,KAAL,CAAWG,aAAlB,KAAoC,UAAxC,EAAoD;AAChD,eAAKH,KAAL,CAAWG,aAAX,CAAyBJ,KAAzB;AACH;AACJ;AACJ;;;4BAEOK,S,EAAW;AAAA,UACPL,KADO,GACGK,SAAS,CAACC,MADb,CACPN,KADO;;AAGf,UAAIA,KAAK,KAAK,KAAKG,KAAL,CAAWH,KAAzB,EAAgC;AAC5B,aAAKD,QAAL,CAAc;AAAEC,UAAAA,KAAK,EAALA;AAAF,SAAd;;AAEA,YAAI,OAAO,KAAKC,KAAL,CAAWG,aAAlB,KAAoC,UAAxC,EAAoD;AAChD,eAAKH,KAAL,CAAWG,aAAX,CAAyBJ,KAAzB;AACH;AACJ;AACJ;;;6BAEQ;AACL,aAAO,KAAKC,KAAL,CAAWM,YAAX,CAAwB,KAAKC,QAA7B,CAAP;AACH;;;;;;;;;;wBAhCc;AACX,+BACO,KAAKP,KADZ,EAEO,KAAKE,KAFZ,EAGO,KAAKR,OAHZ;AAKH;;;;EA7BwBH,S;;AA0D7B,IAAMiB,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAF,YAAY,EAAI;AACvC,SAAO,UAAAN,KAAK,EAAI;AACZ,WACI,oBAAC,cAAD,eACQA,KADR;AAEI,MAAA,YAAY,EAAEM,YAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ;AAMH,GAPD;AAQH,CATD;;AAWA,SACIE,kBADJ;;;;;;;;;;;;;;;;;;;;;;0BA7EMhB,a;0BAQAC,c;0BA0DAe,kB","sourcesContent":["import React, { Component } from 'react';\n\nconst INPUT_METHODS = [\n    'changeValue',\n    'onInput',\n]\n\n/**\n * @abstract\n */\nclass InputWithState extends Component {\n    constructor() {\n        super();\n\n        this.methods = {};\n        INPUT_METHODS\n            .forEach(methodName => {\n                this.methods[methodName] = this[methodName].bind(this)\n            });\n    }\n\n    componentWillMount() {\n        this.setState({\n            value: this.props.value || ''\n        });\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.value !== this.props.value) {\n            this.setState({ value: newProps.value });\n        }\n    }\n\n    get allProps() {\n        return {\n            ...this.props,\n            ...this.state,\n            ...this.methods\n        };\n    }\n\n    changeValue(value) {\n        if (value !== this.state.value) {\n            this.setState({ value });\n\n            if (typeof this.props.onValueChange === 'function') {\n                this.props.onValueChange(value);\n            }\n        }\n    }\n\n    onInput(eventData) {\n        const { value } = eventData.target;\n\n        if (value !== this.state.value) {\n            this.setState({ value });\n\n            if (typeof this.props.onValueChange === 'function') {\n                this.props.onValueChange(value);\n            }\n        }\n    }\n\n    render() {\n        return this.props.renderMethod(this.allProps);\n    }\n}\n\nconst wrapWithInputState = renderMethod => {\n    return props => {\n        return (\n            <InputWithState \n                {...props}\n                renderMethod={renderMethod}\n            />\n        );\n    };\n};\n\nexport {\n    wrapWithInputState\n};\n"]}]}