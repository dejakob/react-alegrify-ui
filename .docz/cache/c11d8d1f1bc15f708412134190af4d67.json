{"remainingRequest":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/preset-env\",\"@babel/preset-react\",[\"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/number-input.js","dependencies":[{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/number-input.js","mtime":1559777267590},{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/cache-loader/dist/cjs.js","mtime":1551899788855},{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1559770457280}],"contextDependencies":[],"result":["import React from'react';import PropTypes from'prop-types';import{wrapWithInputState}from'./abstract/input-with-state';import{attachUniversalProps}from'./helpers/universal-props';/**\n * <NumberInput />\n * \n * ```jsx\n * <NumberInput\n *   id=\"number_input\"\n *   name=\"number_input\"\n *   min={1}\n *   value={6}\n *   max={10}\n * />\n * ```\n */function NumberInput(props){return wrapWithInputState(NumberInputView)(props);}function NumberInputView(props){var classNames=['alegrify-number-input'];var min=props.min||0;var max=props.max||10;var value=Math.max(Math.min(max,props.value),min);if(props.className){classNames.push(props.className);}if(props.wide){classNames.push('alegrify-number-input--wide');}if(props.full){classNames.push('alegrify-number-input--full');}return React.createElement(\"label\",{htmlFor:props.id,className:classNames.join(' ')},React.createElement(\"button\",{className:\"alegrify-number-input__add\",tabIndex:\"-1\",onClick:up},React.createElement(\"span\",null,\"+\")),React.createElement(\"input\",{type:\"text\",id:props.id,name:props.name,className:\"alegrify-number-input__input\",value:value,disabled:props.disabled,onInput:onInput,onKeyUp:onKeyUp,onKeyDown:props.onKeyDown,onFocus:props.onFocus,onBlur:props.onBlur,autoComplete:\"off\"}),React.createElement(\"button\",{className:\"alegrify-number-input__subtract\",tabIndex:\"-1\",onClick:down},React.createElement(\"span\",null,\"-\")));function onInput(eventData){var value=eventData.target.value;var number=Number(value);if(isNaN(number)){props.changeValue(0);}else if(number<min){props.changeValue(min);}else if(number>max){props.changeValue(max);}else{props.changeValue(number);}}function onKeyUp(eventData){switch(eventData.keyCode){case 38:eventData.preventDefault();up();break;case 40:eventData.preventDefault();down();break;}if(typeof props.onKeyUp==='function'){props.onKeyUp(eventData);}}function up(){props.changeValue(Math.min(max,(props.value||0)+1));}function down(){props.changeValue(Math.max(min,(props.value||0)-1));}}NumberInput.propTypes={/**\n     * Additional classnames\n     */className:PropTypes.string,/**\n     * Input id\n     */id:PropTypes.string.isRequired,/**\n     * Input name\n     */name:PropTypes.string.isRequired,/**\n     * Input value, must be a number\n     */value:PropTypes.number,/**\n     * Is input disabled?\n     */disabled:PropTypes.bool,/**\n     * Is this a wide variant?\n     */wide:PropTypes.bool,/**\n     * 100% width?\n     */full:PropTypes.bool,/**\n     * Min value\n     */min:PropTypes.number,/**\n     * Max value\n     */max:PropTypes.number,/**\n     * On value change, param: number value\n     */onValueChange:PropTypes.func,/**\n     * Native onKeyUp event\n     */onKeyUp:PropTypes.func,/**\n     * Native onKeyDown event\n     */onKeyDown:PropTypes.func,/**\n     * Native onFocus event\n     */onFocus:PropTypes.func,/**\n     * Native onBlur event\n     */onBlur:PropTypes.func};NumberInput.defaultProps={className:'',min:0,max:10,value:0,wide:false,full:false,disabled:false};export default attachUniversalProps(NumberInput);",{"version":3,"sources":["/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/number-input.js"],"names":["React","PropTypes","wrapWithInputState","attachUniversalProps","NumberInput","props","NumberInputView","classNames","min","max","value","Math","className","push","wide","full","id","join","up","name","disabled","onInput","onKeyUp","onKeyDown","onFocus","onBlur","down","eventData","target","number","Number","isNaN","changeValue","keyCode","preventDefault","propTypes","string","isRequired","bool","onValueChange","func","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { wrapWithInputState } from './abstract/input-with-state';\nimport { attachUniversalProps } from './helpers/universal-props';\n\n/**\n * <NumberInput />\n * \n * ```jsx\n * <NumberInput\n *   id=\"number_input\"\n *   name=\"number_input\"\n *   min={1}\n *   value={6}\n *   max={10}\n * />\n * ```\n */\nfunction NumberInput(props) {\n    return wrapWithInputState(NumberInputView)(props);\n}\n\nfunction NumberInputView(props) {\n    const classNames = ['alegrify-number-input'];\n    const min = props.min || 0;\n    const max = props.max || 10;\n    const value = Math.max(Math.min(max, props.value), min);\n\n    if (props.className) {\n        classNames.push(props.className);\n    }\n\n    if (props.wide) {\n        classNames.push('alegrify-number-input--wide');\n    }\n\n    if (props.full) {\n        classNames.push('alegrify-number-input--full');\n    }\n\n    return (\n        <label\n            htmlFor={props.id}\n            className={classNames.join(' ')}\n        >\n            <button\n                className=\"alegrify-number-input__add\"\n                tabIndex=\"-1\"\n                onClick={up}\n            >\n                <span>+</span>\n            </button>\n            <input\n                type=\"text\"\n                id={props.id}\n                name={props.name}\n                className=\"alegrify-number-input__input\"\n                value={value}\n                disabled={props.disabled}\n                onInput={onInput}\n                onKeyUp={onKeyUp}\n                onKeyDown={props.onKeyDown}\n                onFocus={props.onFocus}\n                onBlur={props.onBlur}\n                autoComplete=\"off\"\n            />\n            <button\n                className=\"alegrify-number-input__subtract\"\n                tabIndex=\"-1\"\n                onClick={down}\n            >\n                <span>-</span>\n            </button>\n        </label>\n    );\n\n    function onInput(eventData) {\n        const { value } = eventData.target;\n        const number = Number(value);\n\n        if (isNaN(number)) {\n            props.changeValue(0);\n        }\n        else if (number < min) {\n            props.changeValue(min);\n        }\n        else if (number > max) {\n            props.changeValue(max);\n        }\n        else {\n            props.changeValue(number);\n        }\n    }\n\n    function onKeyUp(eventData) {\n        switch (eventData.keyCode) {\n            case 38:\n                eventData.preventDefault();\n                up();\n                break;\n\n            case 40:\n                eventData.preventDefault();\n                down();\n                break;\n        }\n\n        if (typeof props.onKeyUp === 'function') {\n            props.onKeyUp(eventData);\n        }\n    }\n\n    function up() {\n        props.changeValue(Math.min(max, (props.value || 0) + 1));\n    }\n\n    function down() {\n        props.changeValue(Math.max(min, (props.value || 0) - 1));\n    }\n}\n\nNumberInput.propTypes = {\n\n    /**\n     * Additional classnames\n     */\n    className: PropTypes.string,\n\n    /**\n     * Input id\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * Input name\n     */\n    name: PropTypes.string.isRequired,\n\n    /**\n     * Input value, must be a number\n     */\n    value: PropTypes.number,\n\n    /**\n     * Is input disabled?\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Is this a wide variant?\n     */\n    wide: PropTypes.bool,\n\n    /**\n     * 100% width?\n     */\n    full: PropTypes.bool,\n\n    /**\n     * Min value\n     */\n    min: PropTypes.number,\n\n    /**\n     * Max value\n     */\n    max: PropTypes.number,\n\n    /**\n     * On value change, param: number value\n     */\n    onValueChange: PropTypes.func,\n\n    /**\n     * Native onKeyUp event\n     */\n    onKeyUp: PropTypes.func,\n\n    /**\n     * Native onKeyDown event\n     */\n    onKeyDown: PropTypes.func,\n\n    /**\n     * Native onFocus event\n     */\n    onFocus: PropTypes.func,\n\n    /**\n     * Native onBlur event\n     */\n    onBlur: PropTypes.func\n};\nNumberInput.defaultProps = {\n    className: '',\n    min: 0,\n    max: 10,\n    value: 0,\n    wide: false,\n    full: false,\n    disabled: false\n};\n\nexport default attachUniversalProps(NumberInput);\n"]}]}