{"remainingRequest":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/preset-env\",\"@babel/preset-react\",[\"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/number-input.js","dependencies":[{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/number-input.js","mtime":1559777154497},{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/cache-loader/dist/cjs.js","mtime":1551899788855},{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1559770457280}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/number-input.js\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { wrapWithInputState } from './abstract/input-with-state';\nimport { attachUniversalProps } from './helpers/universal-props';\n/**\n * <NumberInput />\n * \n * ```jsx\n * <NumberInput\n *   id=\"number_input\"\n *   name=\"number_input\"\n *   min={1}\n *   value={6}\n *   max={10}\n * />\n * ```\n */\n\nfunction NumberInput(props) {\n  return wrapWithInputState(NumberInputView)(props);\n}\n\nfunction NumberInputView(props) {\n  var classNames = ['alegrify-number-input'];\n  var min = props.min || 0;\n  var max = props.max || 10;\n  var value = Math.max(Math.min(max, props.value), min);\n\n  if (props.className) {\n    classNames.push(props.className);\n  }\n\n  if (props.wide) {\n    classNames.push('alegrify-number-input--wide');\n  }\n\n  if (props.full) {\n    classNames.push('alegrify-number-input--full');\n  }\n\n  return React.createElement(\"label\", {\n    htmlFor: props.id,\n    className: classNames.join(' '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"alegrify-number-input__add\",\n    tabIndex: \"-1\",\n    onClick: up,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"+\")), React.createElement(\"input\", {\n    type: \"text\",\n    id: props.id,\n    name: props.name,\n    className: \"alegrify-number-input__input\",\n    value: value,\n    disabled: props.disabled,\n    onInput: onInput,\n    onKeyUp: onKeyUp,\n    onKeyDown: props.onKeyDown,\n    onFocus: props.onFocus,\n    onBlur: props.onBlur,\n    autoComplete: \"off\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"alegrify-number-input__subtract\",\n    tabIndex: \"-1\",\n    onClick: down,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"-\")));\n\n  function onInput(eventData) {\n    var value = eventData.target.value;\n    var number = Number(value);\n\n    if (isNaN(number)) {\n      props.changeValue(0);\n    } else if (number < min) {\n      props.changeValue(min);\n    } else if (number > max) {\n      props.changeValue(max);\n    } else {\n      props.changeValue(number);\n    }\n  }\n\n  function onKeyUp(eventData) {\n    switch (eventData.keyCode) {\n      case 38:\n        eventData.preventDefault();\n        up();\n        break;\n\n      case 40:\n        eventData.preventDefault();\n        down();\n        break;\n    }\n\n    if (typeof props.onKeyUp === 'function') {\n      props.onKeyUp(eventData);\n    }\n  }\n\n  function up() {\n    props.changeValue(Math.min(max, (props.value || 0) + 1));\n  }\n\n  function down() {\n    props.changeValue(Math.max(min, (props.value || 0) - 1));\n  }\n}\n\nNumberInput.propTypes = {\n  /**\n   * Additional classnames\n   */\n  className: PropTypes.string,\n\n  /**\n   * Input id\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Input name\n   */\n  name: PropTypes.string.isRequired,\n\n  /**\n   * Input value, must be a number\n   */\n  value: PropTypes.number,\n\n  /**\n   * Is input disabled?\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Is this a wide variant?\n   */\n  wide: PropTypes.bool,\n\n  /**\n   * 100% width?\n   */\n  full: PropTypes.bool,\n\n  /**\n   * Min value\n   */\n  min: PropTypes.number,\n\n  /**\n   * Max value\n   */\n  max: PropTypes.number,\n\n  /**\n   * On value change, param: number value\n   */\n  onValueChange: PropTypes.func\n};\nNumberInput.defaultProps = {\n  className: '',\n  min: 0,\n  max: 10,\n  value: 0,\n  wide: false,\n  full: false,\n  disabled: false\n};\nNumberInput.propExamples = {\n  id: 'number_input',\n  name: 'number_input',\n  value: 6,\n  disabled: false,\n  wide: false,\n  full: false,\n  min: 1,\n  max: 10\n};\n\nvar _default = attachUniversalProps(NumberInput);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(NumberInput, \"NumberInput\", \"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/number-input.js\");\n  reactHotLoader.register(NumberInputView, \"NumberInputView\", \"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/number-input.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/number-input.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();",{"version":3,"sources":["/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/number-input.js"],"names":["React","PropTypes","wrapWithInputState","attachUniversalProps","NumberInput","props","NumberInputView","classNames","min","max","value","Math","className","push","wide","full","id","join","up","name","disabled","onInput","onKeyUp","onKeyDown","onFocus","onBlur","down","eventData","target","number","Number","isNaN","changeValue","keyCode","preventDefault","propTypes","string","isRequired","bool","onValueChange","func","defaultProps","propExamples"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { wrapWithInputState } from './abstract/input-with-state';\nimport { attachUniversalProps } from './helpers/universal-props';\n\n/**\n * <NumberInput />\n * \n * ```jsx\n * <NumberInput\n *   id=\"number_input\"\n *   name=\"number_input\"\n *   min={1}\n *   value={6}\n *   max={10}\n * />\n * ```\n */\nfunction NumberInput(props) {\n    return wrapWithInputState(NumberInputView)(props);\n}\n\nfunction NumberInputView(props) {\n    const classNames = ['alegrify-number-input'];\n    const min = props.min || 0;\n    const max = props.max || 10;\n    const value = Math.max(Math.min(max, props.value), min);\n\n    if (props.className) {\n        classNames.push(props.className);\n    }\n\n    if (props.wide) {\n        classNames.push('alegrify-number-input--wide');\n    }\n\n    if (props.full) {\n        classNames.push('alegrify-number-input--full');\n    }\n\n    return (\n        <label\n            htmlFor={props.id}\n            className={classNames.join(' ')}\n        >\n            <button\n                className=\"alegrify-number-input__add\"\n                tabIndex=\"-1\"\n                onClick={up}\n            >\n                <span>+</span>\n            </button>\n            <input\n                type=\"text\"\n                id={props.id}\n                name={props.name}\n                className=\"alegrify-number-input__input\"\n                value={value}\n                disabled={props.disabled}\n                onInput={onInput}\n                onKeyUp={onKeyUp}\n                onKeyDown={props.onKeyDown}\n                onFocus={props.onFocus}\n                onBlur={props.onBlur}\n                autoComplete=\"off\"\n            />\n            <button\n                className=\"alegrify-number-input__subtract\"\n                tabIndex=\"-1\"\n                onClick={down}\n            >\n                <span>-</span>\n            </button>\n        </label>\n    );\n\n    function onInput(eventData) {\n        const { value } = eventData.target;\n        const number = Number(value);\n\n        if (isNaN(number)) {\n            props.changeValue(0);\n        }\n        else if (number < min) {\n            props.changeValue(min);\n        }\n        else if (number > max) {\n            props.changeValue(max);\n        }\n        else {\n            props.changeValue(number);\n        }\n    }\n\n    function onKeyUp(eventData) {\n        switch (eventData.keyCode) {\n            case 38:\n                eventData.preventDefault();\n                up();\n                break;\n\n            case 40:\n                eventData.preventDefault();\n                down();\n                break;\n        }\n\n        if (typeof props.onKeyUp === 'function') {\n            props.onKeyUp(eventData);\n        }\n    }\n\n    function up() {\n        props.changeValue(Math.min(max, (props.value || 0) + 1));\n    }\n\n    function down() {\n        props.changeValue(Math.max(min, (props.value || 0) - 1));\n    }\n}\n\nNumberInput.propTypes = {\n\n    /**\n     * Additional classnames\n     */\n    className: PropTypes.string,\n\n    /**\n     * Input id\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * Input name\n     */\n    name: PropTypes.string.isRequired,\n\n    /**\n     * Input value, must be a number\n     */\n    value: PropTypes.number,\n\n    /**\n     * Is input disabled?\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Is this a wide variant?\n     */\n    wide: PropTypes.bool,\n\n    /**\n     * 100% width?\n     */\n    full: PropTypes.bool,\n\n    /**\n     * Min value\n     */\n    min: PropTypes.number,\n\n    /**\n     * Max value\n     */\n    max: PropTypes.number,\n\n    /**\n     * On value change, param: number value\n     */\n    onValueChange: PropTypes.func\n};\nNumberInput.defaultProps = {\n    className: '',\n    min: 0,\n    max: 10,\n    value: 0,\n    wide: false,\n    full: false,\n    disabled: false\n};\nNumberInput.propExamples = {\n    id: 'number_input',\n    name: 'number_input',\n    value: 6,\n    disabled: false,\n    wide: false,\n    full: false,\n    min: 1,\n    max: 10\n};\n\nexport default attachUniversalProps(NumberInput);\n"]}]}