{"remainingRequest":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/preset-env\",\"@babel/preset-react\",[\"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/input.js","dependencies":[{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/input.js","mtime":1551950719862},{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/cache-loader/dist/cjs.js","mtime":1551899788855},{"path":"/Users/jakobkerkhove/alegrify/react-alegrify-ui/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1551376331885}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/input.js\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { wrapWithInputState } from './abstract/input-with-state';\n/**\n * <Input />\n * \n * ```jsx\n * <Input\n *   id=\"my_input\"\n *   name=\"my_input\"\n *   multiline={true}\n *   value=\"default value\"\n * />\n * ```\n */\n\nfunction Input(props) {\n  var Component = wrapWithInputState(InputView);\n  return React.createElement(Component, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }));\n}\n\nfunction InputView(props) {\n  var classNames = ['alegrify-input'];\n\n  if (props.className) {\n    classNames.push(props.className);\n  }\n\n  if (props.full) {\n    classNames.push('alegrify-input--full');\n  }\n\n  if (props.multiline) {\n    var amountOfLines = ((props.value || '').match(/\\n/gi) || []).length + 1;\n    return React.createElement(\"textarea\", {\n      id: props.id,\n      name: props.name,\n      className: classNames.join(' '),\n      placeholder: props.placeholder || '',\n      onInput: onInput,\n      onKeyUp: props.onKeyUp,\n      onKeyDown: props.onKeyDown,\n      onFocus: props.onFocus,\n      onBlur: props.onBlur,\n      rows: amountOfLines,\n      value: props.value,\n      disabled: props.disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"input\", {\n    id: props.id,\n    name: props.name,\n    type: props.type || 'text',\n    className: classNames.join(' '),\n    placeholder: props.placeholder || '',\n    value: props.value,\n    disabled: props.disabled,\n    onInput: onInput,\n    onKeyUp: props.onKeyUp,\n    onKeyDown: props.onKeyDown,\n    onFocus: props.onFocus,\n    onBlur: props.onBlur,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  });\n\n  function onInput(eventData) {\n    var value = eventData.target.value;\n    props.changeValue(value);\n  }\n}\n\nInput.propTypes = {\n  /**\n   * Value to show in the input\n   */\n  value: PropTypes.string.isRequired,\n\n  /**\n   * Additional classnames\n   */\n  className: PropTypes.string,\n\n  /**\n   * Input type\n   */\n  type: PropTypes.string,\n\n  /**\n   * Input placeholder\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * 100% width?\n   */\n  full: PropTypes.bool,\n\n  /**\n   * Use textarea instead of input\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Disable input\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Input id\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Input name\n   */\n  name: PropTypes.string.isRequired,\n\n  /**\n   * On value change method (passes value)\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * Native onKeyUp event\n   */\n  onKeyUp: PropTypes.func,\n\n  /**\n   * Native onKeyDown event\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Native onFocus event\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Native onBlur event\n   */\n  onBlur: PropTypes.func\n};\nInput.defaultProps = {\n  type: 'text'\n};\nInput.propExamples = {\n  value: 'default value',\n  className: '',\n  type: 'text',\n  placeholder: 'Placeholder text',\n  full: false,\n  multiline: false,\n  id: 'input',\n  name: 'input'\n};\nvar _default = Input;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Input, \"Input\", \"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/input.js\");\n  reactHotLoader.register(InputView, \"InputView\", \"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/input.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/input.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();\n\nInput.__docgenInfo = {\n  \"description\": \"<Input />\\n\\n```jsx\\n<Input\\n  id=\\\"my_input\\\"\\n  name=\\\"my_input\\\"\\n  multiline={true}\\n  value=\\\"default value\\\"\\n/>\\n```\",\n  \"methods\": [],\n  \"displayName\": \"Input\",\n  \"props\": {\n    \"type\": {\n      \"defaultValue\": {\n        \"value\": \"'text'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input type\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Value to show in the input\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Additional classnames\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input placeholder\"\n    },\n    \"full\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"100% width?\"\n    },\n    \"multiline\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Use textarea instead of input\"\n    },\n    \"disabled\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Disable input\"\n    },\n    \"id\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input id\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name\"\n    },\n    \"onValueChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"On value change method (passes value)\"\n    },\n    \"onKeyUp\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Native onKeyUp event\"\n    },\n    \"onKeyDown\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Native onKeyDown event\"\n    },\n    \"onFocus\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Native onFocus event\"\n    },\n    \"onBlur\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Native onBlur event\"\n    }\n  }\n};",{"version":3,"sources":["/Users/jakobkerkhove/alegrify/react-alegrify-ui/lib/input.js"],"names":["React","PropTypes","wrapWithInputState","Input","props","Component","InputView","classNames","className","push","full","multiline","amountOfLines","value","match","length","id","name","join","placeholder","onInput","onKeyUp","onKeyDown","onFocus","onBlur","disabled","type","eventData","target","changeValue","propTypes","string","isRequired","bool","onValueChange","func","defaultProps","propExamples"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { wrapWithInputState } from './abstract/input-with-state';\n\n/**\n * <Input />\n * \n * ```jsx\n * <Input\n *   id=\"my_input\"\n *   name=\"my_input\"\n *   multiline={true}\n *   value=\"default value\"\n * />\n * ```\n */\nfunction Input(props) {\n    const Component = wrapWithInputState(InputView);\n    return <Component {...props} />;\n}\n\nfunction InputView(props) {\n    const classNames = ['alegrify-input'];\n\n    if (props.className) {\n        classNames.push(props.className);\n    }\n\n    if (props.full) {\n        classNames.push('alegrify-input--full');\n    }\n\n    if (props.multiline) {\n        const amountOfLines = ((props.value || '').match(/\\n/gi) || []).length + 1;\n\n        return (\n            <textarea\n                id={props.id}\n                name={props.name}\n                className={classNames.join(' ')}\n                placeholder={props.placeholder || ''}\n                onInput={onInput}\n                onKeyUp={props.onKeyUp}\n                onKeyDown={props.onKeyDown}\n                onFocus={props.onFocus}\n                onBlur={props.onBlur}\n                rows={amountOfLines}\n                value={props.value}\n                disabled={props.disabled}\n            />\n        );\n    }\n\n    return (\n        <input\n            id={props.id}\n            name={props.name}\n            type={props.type || 'text'}\n            className={classNames.join(' ')}\n            placeholder={props.placeholder || ''}\n            value={props.value}\n            disabled={props.disabled}\n            onInput={onInput}\n            onKeyUp={props.onKeyUp}\n            onKeyDown={props.onKeyDown}\n            onFocus={props.onFocus}\n            onBlur={props.onBlur}\n        />\n    );\n\n    function onInput(eventData) {\n        const { value } = eventData.target;\n\n        props.changeValue(value);\n    }\n}\n\nInput.propTypes = {\n\n    /**\n     * Value to show in the input\n     */\n    value: PropTypes.string.isRequired,\n\n    /**\n     * Additional classnames\n     */\n    className: PropTypes.string,\n\n    /**\n     * Input type\n     */\n    type: PropTypes.string,\n\n    /**\n     * Input placeholder\n     */\n    placeholder: PropTypes.string,\n\n    /**\n     * 100% width?\n     */\n    full: PropTypes.bool,\n\n    /**\n     * Use textarea instead of input\n     */\n    multiline: PropTypes.bool,\n\n    /**\n     * Disable input\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Input id\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * Input name\n     */\n    name: PropTypes.string.isRequired,\n\n    /**\n     * On value change method (passes value)\n     */\n    onValueChange: PropTypes.func,\n\n    /**\n     * Native onKeyUp event\n     */\n    onKeyUp: PropTypes.func,\n\n    /**\n     * Native onKeyDown event\n     */\n    onKeyDown: PropTypes.func,\n\n    /**\n     * Native onFocus event\n     */\n    onFocus: PropTypes.func,\n\n    /**\n     * Native onBlur event\n     */\n    onBlur: PropTypes.func\n};\nInput.defaultProps = {\n    type: 'text'\n};\nInput.propExamples = {\n    value: 'default value',\n    className: '',\n    type: 'text',\n    placeholder: 'Placeholder text',\n    full: false,\n    multiline: false,\n    id: 'input',\n    name: 'input'\n};\n\nexport default Input;\n"]}]}